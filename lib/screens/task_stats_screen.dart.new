import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import 'package:micro_habit_runner/models/session_model.dart';
import 'package:micro_habit_runner/models/task_model.dart';
import 'package:micro_habit_runner/services/session_service.dart';
import 'package:micro_habit_runner/services/task_service.dart';
import 'package:micro_habit_runner/utils/task_colors.dart';

class TaskStatsScreen extends StatefulWidget {
  final String taskId;

  const TaskStatsScreen({Key? key, required this.taskId}) : super(key: key);

  @override
  State<TaskStatsScreen> createState() => _TaskStatsScreenState();
}

class _TaskStatsScreenState extends State<TaskStatsScreen> {
  bool _isLoading = true;
  List<SessionModel> _taskSessions = [];
  TaskModel? _task;
  
  // 統計データ
  int _totalSessions = 0;
  int _onTimePercentage = 0;
  double _averageTouchCount = 0;
  Map<String, int> _concentrationBreakdown = {
    'high': 0,  // とても集中できた
    'medium': 0, // 集中できた
    'low': 0,    // 集中できなかった
  };
  
  // 直近30日のセッションマッピング
  final Map<DateTime, bool> _last30DaysSessions = {};

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
      // 初期値を設定しておく（データがないケースに備えて）
      _totalSessions = 0;
      _onTimePercentage = 0;
      _averageTouchCount = 0;
      _concentrationBreakdown = {'high': 0, 'medium': 0, 'low': 0};
      _last30DaysSessions.clear();
    });

    try {
      // Firebaseの初期化状態を確認
      print('Firebaseの初期化状態確認...');
      
      // セッションサービスとタスクサービスを取得
      final sessionService = Provider.of<SessionService>(context, listen: false);
      final taskService = Provider.of<TaskService>(context, listen: false);
      
      // タスク情報を取得
      print('タスク情報の取得を開始します - ID: ${widget.taskId}');
      await taskService.getTasks();
      
      try {
        _task = taskService.tasks.firstWhere(
          (task) => task.id == widget.taskId,
          orElse: () => throw Exception('Task not found'),
        );
        print('タスク取得成功: ${_task!.name}, カラー: ${_task!.colorKey}');
      } catch (e) {
        print('タスク取得エラー: $e');
        // エラー時の対応（UIに影響しないよう最低限のデータは設定）
        _task = TaskModel(
          id: widget.taskId,
          name: 'Unknown Task',
          scheduledTime: '00:00',
          duration: 0,
          isPriority: false,
          isActive: true,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
          colorKey: 'blue',
          weekdays: ['毎日'],
        );
      }
      
      // 複数の方法でセッションデータ取得を試みる
      print('セッションデータの取得を開始 - 方法1: getSessionsByTask');
      _taskSessions = await sessionService.getSessionsByTask(widget.taskId);
      
      if (_taskSessions.isEmpty) {
        print('方法1でセッション取得できず、方法2: refreshAndGetSessionsByTask を試行');
        _taskSessions = await sessionService.refreshAndGetSessionsByTask(widget.taskId);
        
        // それでもデータが取得できない場合の確認
        if (_taskSessions.isEmpty) {
          print('方法2でもセッション取得できず。バックアップ方法を試行: 全セッション取得後フィルタリング');
          // 全セッションを取得してメモリ上でフィルタリング
          List<SessionModel> allSessions = await sessionService.getAllSessions();
          _taskSessions = allSessions.where((s) => s.taskId == widget.taskId).toList();
          print('バックアップ方法でのセッション取得結果: ${_taskSessions.length}件');
        }
      }
      
      print('セッションデータ取得完了: ${_taskSessions.length}件');
      
      // データが取得できた場合に統計計算
      if (_taskSessions.isNotEmpty) {
        _calculateStatistics();
      }
      
      // 直近30日の達成状況のマッピングを作成
      _createLast30DaysMapping();
      
      // デバッグ用：達成状況を出力
      _last30DaysSessions.forEach((date, hasSession) {
        final dateStr = DateFormat('yyyy/MM/dd').format(date);
        print('達成状況 $dateStr: ${hasSession ? "達成" : "未達成"}');
      });
    } catch (e) {
      print('データ読み込みエラー: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // 統計データの計算
  void _calculateStatistics() {
    // 1. 総セッション数の計算
    _totalSessions = _taskSessions.length;
    print('総セッション数: $_totalSessions');
    
    // 2. 定刻達成率の計算
    if (_totalSessions > 0 && _task != null) {
      // scheduledTimeをDateTimeに変換（今日の日付を使用）
      final now = DateTime.now();
      final scheduledTimeParts = _task!.scheduledTime.split(':');
      
      if (scheduledTimeParts.length == 2) {
        try {
          final scheduledHour = int.parse(scheduledTimeParts[0]);
          final scheduledMinute = int.parse(scheduledTimeParts[1]);
          
          final scheduledDateTime = DateTime(
            now.year,
            now.month,
            now.day,
            scheduledHour,
            scheduledMinute,
          );
          
          // 予定時間の前後15分以内に開始されたセッション数をカウント
          final onTimeSessions = _taskSessions.where((session) {
            if (session.startedAt == null) return false;
            
            // セッション開始日時から時間部分だけを取り出して比較用のDateTimeを作成
            final sessionTime = DateTime(
              now.year,
              now.month,
              now.day,
              session.startedAt!.hour,
              session.startedAt!.minute,
            );
            
            // 予定時間の前後15分以内かチェック
            final difference = sessionTime.difference(scheduledDateTime).inMinutes.abs();
            return difference <= 15;
          }).length;
          
          _onTimePercentage = ((onTimeSessions / _totalSessions) * 100).round();
          print('定刻達成率: $_onTimePercentage% (全体: $_totalSessions, 定刻: $onTimeSessions)');
        } catch (e) {
          print('定刻達成率の計算エラー: $e');
          _onTimePercentage = 0;
        }
      }
    }
    
    // 3. 平均タップ回数を計算
    if (_totalSessions > 0) {
      final totalTaps = _taskSessions.fold(0, (sum, session) => sum + (session.touchCount ?? 0));
      _averageTouchCount = totalTaps / _totalSessions;
      print('平均タップ回数: $_averageTouchCount');
    }
    
    // 4. 集中度の内訳を計算
    _concentrationBreakdown = {'high': 0, 'medium': 0, 'low': 0};
    
    for (var session in _taskSessions) {
      final concentration = session.concentration ?? 'medium';
      if (_concentrationBreakdown.containsKey(concentration)) {
        _concentrationBreakdown[concentration] = _concentrationBreakdown[concentration]! + 1;
      }
    }
    
    print('集中度内訳 - 高: ${_concentrationBreakdown['high']}, 中: ${_concentrationBreakdown['medium']}, 低: ${_concentrationBreakdown['low']}');
  }

  // 直近30日のセッションマッピングを作成
  void _createLast30DaysMapping() {
    _last30DaysSessions.clear();
    
    // 今日から過去30日分の日付を生成
    final now = DateTime.now();
    for (int i = 0; i < 30; i++) {
      final date = DateTime(
        now.year,
        now.month,
        now.day,
      ).subtract(Duration(days: i));
      
      // 日付だけを比較するために時間情報をリセット
      _last30DaysSessions[date] = false;
    }
    
    // セッションデータがあれば、対応する日付のフラグをtrueに設定
    for (var session in _taskSessions) {
      if (session.startedAt != null) {
        final sessionDate = DateTime(
          session.startedAt!.year,
          session.startedAt!.month,
          session.startedAt!.day,
        );
        
        // 過去30日以内のセッションかチェック
        final daysAgo = now.difference(sessionDate).inDays;
        if (daysAgo < 30) {
          _last30DaysSessions[sessionDate] = true;
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_task?.name ?? 'タスク詳細'),
        backgroundColor: _task != null 
            ? TaskColors.getColor(_task!.colorKey)
            : Theme.of(context).primaryColor,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildTaskHeader(),
                  const SizedBox(height: 24),
                  _buildTotalAchievements(),
                  const SizedBox(height: 24),
                  _buildStatistics(),
                  const SizedBox(height: 24),
                  _buildLast30DaysCalendar(),
                  const SizedBox(height: 24),
                  _buildConcentrationChart(),
                ],
              ),
            ),
    );
  }

  // タスク詳細ヘッダー
  Widget _buildTaskHeader() {
    if (_task == null) return const SizedBox();
    
    // タスクの色を取得
    final taskColor = TaskColors.getColor(_task!.colorKey);
    
    return Card(
      elevation: 2,
      color: Colors.white,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // タスク名
            Text(
              _task!.name,
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            
            // タスク詳細情報
            GridView.count(
              crossAxisCount: 2,
              mainAxisSpacing: 12,
              crossAxisSpacing: 12,
              childAspectRatio: 4,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              children: [
                // 予定時間
                _buildStatItem(
                  icon: Icons.access_time,
                  label: '予定時間',
                  value: _task!.scheduledTime,
                ),
                
                // 期間
                _buildStatItem(
                  icon: Icons.timelapse,
                  label: '期間',
                  value: _task!.duration.toString() + '分',
                ),
                
                // 曜日
                _buildStatItem(
                  icon: Icons.date_range,
                  label: '曜日',
                  value: _task!.weekdays.join(', '),
                ),
                
                // 優先度
                _buildStatItem(
                  icon: Icons.star,
                  label: '優先度',
                  value: _task!.isPriority ? '高い' : '標準',
                ),
              ],
            ),
            
            // カラーインディケーター
            Container(
              margin: const EdgeInsets.only(top: 16),
              height: 8,
              decoration: BoxDecoration(
                color: taskColor,
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // 累計達成セクションの構築
  Widget _buildTotalAchievements() {
    // タスクの累計時間を計算（分単位で表示）
    int totalMinutes = 0;
    if (_task != null && _taskSessions.isNotEmpty) {
      totalMinutes = _taskSessions.fold(0, (sum, session) => sum + (session.duration ?? 0));
    }
    
    // 時間と分に変換
    final hours = totalMinutes ~/ 60;
    final minutes = totalMinutes % 60;
    
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '累計達成',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                // 達成回数
                Expanded(
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.grey[300]!),
                    ),
                    padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
                    child: Column(
                      children: [
                        Builder(builder: (context) {
                          print('累計達成表示時のデータ: $_totalSessions');
                          return Text(
                            _totalSessions.toString(),
                            style: const TextStyle(
                              fontSize: 32,
                              fontWeight: FontWeight.bold,
                              color: Colors.black87,
                            ),
                          );
                        }),
                        const SizedBox(height: 4),
                        Text(
                          '回達成',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                // 累計時間
                Expanded(
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.grey[300]!),
                    ),
                    padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
                    child: Column(
                      children: [
                        Text(
                          hours > 0 ? '$hours時間$minutes分' : '$minutes分',
                          style: const TextStyle(
                            fontSize: 32,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '累計時間',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // 統計セクションの構築
  Widget _buildStatistics() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '統計情報',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            GridView.count(
              crossAxisCount: 2,
              mainAxisSpacing: 12,
              crossAxisSpacing: 12,
              childAspectRatio: 3,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              children: [
                // 定刻達成率
                _buildStatItem(
                  icon: Icons.timer,
                  label: '定刻達成率',
                  value: '$_onTimePercentage%',
                ),
                
                // 平均タップ回数
                _buildStatItem(
                  icon: Icons.touch_app,
                  label: '平均タップ回数',
                  value: _averageTouchCount.toStringAsFixed(1),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // 統計項目のビルダー
  Widget _buildStatItem({
    required IconData icon,
    required String label,
    required String value,
  }) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Row(
        children: [
          Icon(
            icon,
            size: 18,
            color: Colors.grey[600],
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey[600],
                  ),
                ),
                Text(
                  value,
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // 直近30日のカレンダー
  Widget _buildLast30DaysCalendar() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '直近30日の履歴',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            // 3行×10列のグリッド
            Container(
              // デバッグテキストの表示を防止するためのコンテナ
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
              ),
              width: double.infinity,
              child: GridView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 10, // 横10個
                  mainAxisSpacing: 8,
                  crossAxisSpacing: 8,
                  childAspectRatio: 1,
                ),
                itemCount: 30,
                itemBuilder: (context, index) {
                  // 日付の順番を調整（古い日付が上、新しい日付が下になるように）
                  // 0-9: 最初の行（20日前～29日前）
                  // 10-19: 中間の行（10日前～19日前）
                  // 20-29: 最新の行（0日前～9日前）
                  final int row = index ~/ 10; // 行番号（0, 1, 2）
                  final int col = index % 10;  // 列番号（0-9）
                  
                  // 日数計算（29-0日前に対応）
                  final daysAgo = 29 - (row * 10 + col);
                  final date = DateTime.now().subtract(Duration(days: daysAgo));
                  final dateKey = DateTime(date.year, date.month, date.day);
                  final hasSession = _last30DaysSessions[dateKey] ?? false;
                  
                  return Container(
                    decoration: BoxDecoration(
                      color: hasSession 
                          ? (_task != null ? TaskColors.getColor(_task!.colorKey) : Theme.of(context).primaryColor)
                          : Colors.grey[200],
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.grey[300]!),
                    ),
                    child: Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            '${date.day}',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                              color: hasSession ? Colors.white : Colors.grey[600],
                            ),
                          ),
                          // 各行の最初の要素（0, 10, 20）に月表示を追加
                          if (col == 0) 
                            Text(
                              '${date.month}月',
                              style: TextStyle(
                                fontSize: 10,
                                color: hasSession ? Colors.white.withOpacity(0.8) : Colors.grey[500],
                              ),
                            ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Container(
                  width: 16,
                  height: 16,
                  decoration: BoxDecoration(
                    color: _task != null 
                        ? TaskColors.getColor(_task!.colorKey)
                        : Theme.of(context).primaryColor,
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                const SizedBox(width: 8),
                const Text('タスク達成日'),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // 集中度チャート
  Widget _buildConcentrationChart() {
    // 集計用
    final total = _concentrationBreakdown.values.fold(0, (sum, value) => sum + value);
    
    print('集中度評価表示時のデータ - 高: ${_concentrationBreakdown['high']}, 中: ${_concentrationBreakdown['medium']}, 低: ${_concentrationBreakdown['low']}, 合計: $total');
    
    // パーセンテージを計算（小数点以下も保持してより正確に）
    final highPercent = total > 0 ? (_concentrationBreakdown['high']! / total * 100).round() : 0;
    final mediumPercent = total > 0 ? (_concentrationBreakdown['medium']! / total * 100).round() : 0;
    final lowPercent = total > 0 ? (_concentrationBreakdown['low']! / total * 100).round() : 0;

    print('集中度パーセンテージ - 高: $highPercent%, 中: $mediumPercent%, 低: $lowPercent%');

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '集中度評価',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            if (total == 0)
              const Center(
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Text('データがありません'),
                ),
              )
            else
              Column(
                children: [
                  _buildConcentrationBar(
                    label: 'とても集中できた',
                    percent: highPercent,
                    color: Colors.green,
                    count: _concentrationBreakdown['high']!,
                  ),
                  const SizedBox(height: 12),
                  _buildConcentrationBar(
                    label: '集中できた',
                    percent: mediumPercent,
                    color: Colors.blue,
                    count: _concentrationBreakdown['medium']!,
                  ),
                  const SizedBox(height: 12),
                  _buildConcentrationBar(
                    label: '集中できなかった',
                    percent: lowPercent,
                    color: Colors.red,
                    count: _concentrationBreakdown['low']!,
                  ),
                  const SizedBox(height: 16),
                  // 集中度の説明を追加
                  Text(
                    '集中できた・とても集中できた: ${highPercent + mediumPercent}%',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                      color: Colors.grey[800],
                    ),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  // 集中度バー
  Widget _buildConcentrationBar({
    required String label,
    required int percent,
    required Color color,
    required int count,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Expanded(
              child: Text(
                label,
                style: const TextStyle(fontSize: 14),
              ),
            ),
            Text(
              '$percent%',
              style: const TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              '($count回)',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
        const SizedBox(height: 4),
        ClipRRect(
          borderRadius: BorderRadius.circular(4),
          child: LinearProgressIndicator(
            value: percent / 100,
            backgroundColor: Colors.grey[200],
            valueColor: AlwaysStoppedAnimation<Color>(color),
            minHeight: 12,
          ),
        ),
      ],
    );
  }
}
